(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["angularCropImage"] = factory();
	else
		root["angularCropImage"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var CropImage = _interopRequire(__webpack_require__(1));

	var CropService = _interopRequire(__webpack_require__(2));

	var cropImageModel = _interopRequire(__webpack_require__(3));

	var cropImage = _interopRequire(__webpack_require__(4));

	angular.module("angularCropImage", []).service("CropImage", CropImage).service("CropService", CropService).directive("cropImageModel", cropImageModel).directive("cropImage", cropImage);

/***/ },
/* 1 */
/***/ function(module, exports) {

	"use strict";

	var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

	module.exports = function ($document) {

		var body = angular.element(document.body);

		var CropImage = (function () {
			function CropImage(data) {
				_classCallCheck(this, CropImage);

				this.zoom = 1;
				this.element = data.element;
				this.image = data.image;
				this.pixelRatio = data.pixelRatio;
				this.ratio = _private.methods.getRatio(data.element, data.image);
				this.size = {
					width: parseInt(this.ratio.width < this.ratio.height ? data.image.width * this.ratio.height : data.image.width * this.ratio.width),
					height: parseInt(this.ratio.width < this.ratio.height ? data.image.height * this.ratio.height : data.image.height * this.ratio.width)
				};

				this.saveStyle();

				this.position = {
					x: parseInt((this.size.width - data.element[0].clientWidth) / 2),
					y: parseInt((this.size.height - data.element[0].clientHeight) / 2)
				};

				_private.methods.setCss(this);

				console.log(this);

				this.listen();
			}

			_createClass(CropImage, {
				listen: {
					value: function listen() {

						var _self = this;

						this.element.on("mousedown", startChangePosition).on("touchstart", startChangePosition);

						function startChangePosition(event) {

							_self.__startChangePosition(event);

							$document.on("mousemove", updatePosition).on("mouseup", stopChangePosition).on("touchmove", updatePosition).on("touchend", stopChangePosition);
						}

						function updatePosition(event) {

							_self.__updatePosition(event);
							return false;
						}

						function stopChangePosition(event) {

							$document.off("mousemove", updatePosition).off("mouseup", stopChangePosition).off("touchmove", updatePosition).off("touchend", stopChangePosition);

							_self.__stopChangePosition(event);
						}

						return this;
					}
				},
				zoomIn: {
					value: function zoomIn(rate) {

						this.zoom += rate;

						//if( this.zoom > 1 ) this.zoom = 1;

						this.recalcSize();
					}
				},
				zoomOut: {
					value: function zoomOut(rate) {

						this.zoom -= rate;

						if (this.zoom < 1) this.zoom = 1;

						this.recalcSize();
					}
				},
				saveStyle: {
					value: function saveStyle() {

						this.__oldStyle = {};

						for (var i = 0; this.element[0].style.length > i; i++) {

							var param = this.element[0].style[i];
							this.__oldStyle[param] = this.element[0].style[param];
						}
					}
				},
				cancel: {
					value: function cancel() {

						for (var i in this.element[0].style) {

							var param = this.element[0].style[i];

							this.element[0].style[param] = this.__oldStyle[param] || null;
						}
					}
				},
				recalcSize: {
					value: function recalcSize() {

						var height, width;

						if (this.ratio.width < this.ratio.height) {

							width = this.image.width * this.ratio.height * this.zoom;
							height = this.image.height * this.ratio.height * this.zoom;
						} else {

							width = this.image.width * this.ratio.width * this.zoom;
							height = this.image.height * this.ratio.width * this.zoom;
						}

						this.position.x += (width - this.size.width) / 2;
						this.position.y += (height - this.size.height) / 2;

						this.size = { width: width, height: height };

						this.checkPosition();

						this.element.css({
							backgroundSize: width + "px " + height + "px",
							backgroundPosition: -1 * this.position.x + "px " + -1 * this.position.y + "px"
						});

						return this;
					}
				},
				cut: {
					value: function cut() {

						var canvas = this.getCanvas();
						var scale = this.ratio.width < this.ratio.height ? this.ratio.height * this.zoom : this.ratio.width * this.zoom;

						canvas.ctx.clearRect(0, 0, canvas.element.width, canvas.element.height);
						canvas.ctx.restore();
						canvas.ctx.save();

						canvas.ctx.setTransform(scale * this.pixelRatio, 0, 0, scale * this.pixelRatio, -1 * this.position.x * this.pixelRatio, -1 * this.position.y * this.pixelRatio);

						canvas.ctx.drawImage(this.image, 0, 0);

						return this.result = canvas.element.toDataURL("image/jpg");
					}
				},
				getCanvas: {
					value: function getCanvas() {

						if (this.__canvas) {
							return this.__canvas;
						}

						var canvas = this.__canvas = {};
						canvas.element = document.createElement("canvas");
						canvas.ctx = canvas.element.getContext("2d");
						canvas.element.width = this.element[0].clientWidth * this.pixelRatio;
						canvas.element.height = this.element[0].clientHeight * this.pixelRatio;

						return canvas;
					}
				},
				checkPosition: {
					value: function checkPosition() {

						var f_x = this.size.width - this.element[0].clientWidth;
						var f_y = this.size.height - this.element[0].clientHeight;

						if (f_x < this.position.x) this.position.x = f_x;else if (this.position.x < 0) this.position.x = 0;

						if (f_y < this.position.y) this.position.y = f_y;else if (this.position.y < 0) this.position.y = 0;
					}
				},
				__startChangePosition: {
					value: function __startChangePosition(event) {

						this.__changePosition = event;

						body.addClass("cursor-move");
					}
				},
				__updatePosition: {
					value: function __updatePosition(event) {

						var _event = event.type == "touchmove" ? event.touches[0] : event;
						var _lastEvent = event.type == "touchmove" ? this.__changePosition.touches[0] : this.__changePosition;

						this.position.x += _lastEvent.clientX - _event.clientX;
						this.position.y += _lastEvent.clientY - _event.clientY;

						this.__changePosition = event;

						this.checkPosition();

						this.element.css({ backgroundPosition: -1 * this.position.x + "px " + -1 * this.position.y + "px" });
					}
				},
				__stopChangePosition: {
					value: function __stopChangePosition() {

						this.__changePosition = null;

						body.removeClass("cursor-move");
					}
				}
			});

			return CropImage;
		})();

		var _private = {

			methods: {

				getRatio: function (element, image) {
					return {
						width: element[0].clientWidth / image.width,
						height: element[0].clientHeight / image.height
					};
				},

				setCss: function setCss(instance) {

					instance.element.css({
						backgroundImage: "url(" + instance.image.src + ")",
						backgroundPosition: -1 * instance.position.x + "px " + -1 * instance.position.y + "px",
						backgroundSize: instance.size.width + "px " + instance.size.height + "px",
						backgroundRepeat: "no-repeat"
					});
				}

			}

		};

		return CropImage;
	};

	module.exports.$inject = ["$document"];

/***/ },
/* 2 */
/***/ function(module, exports) {

	"use strict";

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

	module.exports = function () {
		var CropService = function CropService() {
			_classCallCheck(this, CropService);
		};

		return new CropService();
	};

	module.exports.$inject = [];

/***/ },
/* 3 */
/***/ function(module, exports) {

	"use strict";

	module.exports = function (CropImage) {

		return {

			restrict: "A",
			link: function (scope, element, attributes) {

				var dirName = "cropImageModel";
				var model = attributes[dirName];

				if (!attributes[dirName]) {

					throw Error("No model name in attr crop-image-model");
				}

				element.on("change", function () {

					var file = this.files[0],
					    reader = new FileReader();

					if (!file || !/image/.test(file.type)) {
						// error this file not Image;
						return;
					}

					reader.onload = function () {

						scope[model] = reader.result;
						scope.$apply();
					};

					reader.readAsDataURL(file);
				});
			}

		};
	};

	module.exports.$inject = [];

/***/ },
/* 4 */
/***/ function(module, exports) {

	"use strict";

	module.exports = function (CropImage) {

		return {

			restrict: "A",
			link: function (scope, element, attributes) {

				var directiveName = "cropImage";
				var zoom = attributes.zoom;
				var source = attributes[directiveName];
				var instance;

				var data = {
					element: element,
					pixelRatio: attributes.pixelRatio || 1
				};

				scope[zoom] = scope[zoom] || 0;

				scope.$watch(source, function (src) {

					if (!src) return;

					data.image = new Image();
					data.image.src = src;

					scope.cropImageModeEdit = true;

					data.image.onload = function () {
						return element.data(directiveName, instance = new CropImage(data));
					};
				});

				//scope.$watch(zoom, (val, old, scope) => {
				//
				//	if( !instance ) return;
				//
				//	instance.zoom = val;
				//
				//});

				scope.cropImageZoomIn = function (rate) {

					instance.zoomIn(rate);
				};

				scope.cropImageZoomOut = function (rate) {

					instance.zoomOut(rate);
				};

				scope.cropImageCut = function () {
					scope.cropImageModeEdit = false;
					return instance.cut();
				};

				scope.cropImageCancel = function () {
					scope.cropImageModeEdit = false;
					instance.cancel();
				};
			}

		};
	};

	module.exports.$inject = ["CropImage"];

/***/ }
/******/ ])
});
;
//# sourceMappingURL=angularCropImage.min.js.map